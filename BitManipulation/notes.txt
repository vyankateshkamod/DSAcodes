1's complement :
    3 = 0 1 1 0 just take complement of every bits
      = 1 0 0 1

2's complement : 
    Add 1 to 1's complement 1 0 0 1
                            +     1
                            1 0 1 0

Right Shift : 
x >> k basically means eleminating(cliping off) first k bits from x.
13 >> 1     1 1 0 1
          = 0 1 1 0  =  6 
13 >> 2     1 1 0 1
          = 0 0 1 1  =  3
13 >> 4     1 1 0 1
          = 0 0 0 0  =  0 

formula :  x >> y  =  x / 2^k

How computer stores -ve number (-13) : 
    we all know int data is of 32 bit long , 31....0
    computer converts 13(1 1 0 1) to its 2's complement and then it looks like 
    1 1 0 1  =  1 1 1 1 1 .... 0 0 1 1
    the last 31st bit which is 1 idecates that it is a negative number . so the last bit is preserev for sign.

Left Shift : 
    x << k basically means adding(cliping in)  k 0 bits from right.
    13 << 1   1 1 0 1
            1 1 0 1 0 = 26

    formula : x * 2^k


Bitwise NOT (~) Operator Applied to 5 and -5 (32-bit Java int)

------------------------------------------------------------
Step-by-Step: ~5
------------------------------------------------------------

Step 1: Convert 5 to 32-bit binary
5 = 00000000 00000000 00000000 00000101

Step 2: Apply bitwise NOT (~)
~5 = 11111111 11111111 11111111 11111010

Step 3: Interpret the result
This is a negative number (MSB is 1).
To convert to decimal:
  Invert: 00000000 00000000 00000000 00000101
  Add 1 : 00000000 00000000 00000000 00000110 = 6
So, ~5 = -6

------------------------------------------------------------
Step-by-Step: ~(-5)
------------------------------------------------------------

Step 1: Convert -5 to 32-bit binary (2's complement of 5)
  5 in binary : 00000000 00000000 00000000 00000101
  Invert      : 11111111 11111111 11111111 11111010
  Add 1       : 11111111 11111111 11111111 11111011

So, -5 = 11111111 11111111 11111111 11111011

Step 2: Apply bitwise NOT (~)
~(-5) = 00000000 00000000 00000000 00000100

Step 3: Interpret the result
This is 4 in decimal.

------------------------------------------------------------
Final Results
------------------------------------------------------------

Expression | Binary (after ~)                             | Decimal Result
-----------|----------------------------------------------|----------------
~5         | 11111111 11111111 11111111 11111010           | -6
~-5        | 00000000 00000000 00000000 00000100           | 4

